plugins {
    id 'eclipse'
    id 'idea'
    id 'maven-publish'
    id 'net.minecraftforge.gradle' version '[6.0,6.2)'
}


version = modVersion
group = modGroup

java.toolchain.languageVersion = JavaLanguageVersion.of(17)

minecraft {

    mappings channel: "${project.mcp_channel}".toString(), version: "${project.mcp_mappings}".toString()

    // accessTransformer = file('build/resources/main/META-INF/accesstransformer.cfg')
    copyIdeResources = true
    // Default run configurations.
    // These can be tweaked, removed, or duplicated as needed.
    runs {

        // applies to all the run configs below
        configureEach {
            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
            // The markers can be added/remove as needed separated by commas.
            // "SCAN": For mods scan.
            // "REGISTRIES": For firing of registry events.
            // "REGISTRYDUMP": For getting the contents of all registries.
            property 'forge.logging.markers', 'REGISTRIES'

            // Recommended logging level for the console
            // You can set various levels here.
            // Please read: https://stackoverflow.com/questions/2031163/when-to-use-the-different-log-levels
            property 'forge.logging.console.level', 'debug'

            mods {
                "${mod_id}" {
                    source sourceSets.main
                }
            }
        }

        client {

        }

        server {

        }
    }
}


repositories {
    maven {
        name = "forge"
        url = "https://files.minecraftforge.net/maven"
    }
}


dependencies {
    minecraft([
            group  : "${project.forgegroup}",
            name   : "forge",
            version: "${project.mcversion}-${project.forgeversion}"
    ])
}

processResources {
    filesMatching("**/mods.toml"){
        expand 'version': project.version, 'forge_version': project.forgeversion
    }

    exclude '**/Thumbs.db'
}

//Replace strings in IDEA folders as well
def resourceTargets = ['META-INF/mods.toml', 'pack.mcmeta']
def intoTargets = ["$rootDir/out/production/resources/", "$rootDir/out/production/${project.name}.main/", "$rootDir/bin/main/"]
def replaceProperties = ['version': project.version, 'forge_version': project.forgeversion]
processResources {
    inputs.properties replaceProperties
    replaceProperties.put 'project', project

    filesMatching(resourceTargets) {
        expand replaceProperties
    }

    intoTargets.each { target ->
        if (file(target).exists()) {
            copy {
                from(sourceSets.main.resources) {
                    include resourceTargets
                    expand replaceProperties
                }
                into target
            }
        }
    }
    exclude '**/Thumbs.db'

}

jar {
    manifest {
        attributes([
                "Specification-Title": "enhanced_snowman",
                "Specification-Vendor": "maxanier",
                "Specification-Version": "1", // We are version 1 of ourselves
                "Implementation-Title": project.name,
                "Implementation-Version": "${version}",
                "Implementation-Vendor" :"maxanier",
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
}

jar.finalizedBy('reobfJar')

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8' // Use the UTF-8 charset for Java compilation
}
